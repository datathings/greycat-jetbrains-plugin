/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package greycat.idea;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static greycat.idea.psi.GCMTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>_GCMLexer.flex</tt>
 */
public class _GCMLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\2\4\1\22\0\1\2\1\0\1\13\4\0\1\11\1\43\1\44\1\4\1\0\1\37\1\5\1\7\1"+
    "\3\12\6\1\40\1\0\1\46\1\33\1\51\2\0\1\57\1\10\1\53\1\10\1\47\1\50\5\10\1\55"+
    "\1\60\1\56\1\45\2\10\1\54\10\10\1\0\1\12\2\0\1\10\1\0\1\32\1\10\1\14\1\27"+
    "\1\23\1\35\1\26\1\10\1\25\2\10\1\31\1\36\1\16\1\15\1\22\1\10\1\34\1\17\1\20"+
    "\1\24\1\10\1\52\1\30\1\21\1\10\1\41\1\0\1\42\7\0\1\1\32\0\1\2\337\0\1\2\177"+
    "\0\13\2\35\0\2\1\5\0\1\2\57\0\1\2\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\1\1\3\1\4\1\5\2\1"+
    "\10\5\1\6\1\5\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\1\2\5\1\15\1\0\1\3\1\0\1\16"+
    "\3\0\13\5\1\0\2\5\1\0\11\5\1\17\1\20"+
    "\1\21\1\0\2\5\1\22\4\5\1\23\4\5\1\0"+
    "\1\24\1\25\1\26\1\27\3\5\1\30\1\31\1\5"+
    "\1\0\3\5\1\32\1\0\1\5\1\33\1\34\1\35"+
    "\2\5\1\36";

  private static int [] zzUnpackAction() {
    int [] result = new int[101];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\365\0\61\0\u0126"+
    "\0\u0157\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d\0\u02ae"+
    "\0\u02df\0\u0310\0\61\0\u0341\0\61\0\61\0\61\0\61"+
    "\0\61\0\61\0\u0372\0\u03a3\0\u03d4\0\u0405\0\u0436\0\u0467"+
    "\0\u0157\0\61\0\u0498\0\u0188\0\u04c9\0\u04fa\0\u052b\0\u055c"+
    "\0\u058d\0\u05be\0\u05ef\0\u0620\0\u0651\0\u0682\0\u06b3\0\u06e4"+
    "\0\u0715\0\u0746\0\u0777\0\u07a8\0\u07d9\0\u080a\0\u083b\0\u086c"+
    "\0\u089d\0\u08ce\0\u08ff\0\u0930\0\u0961\0\u0126\0\u0126\0\u0126"+
    "\0\u0992\0\u09c3\0\u09f4\0\u0436\0\u0a25\0\u0a56\0\u0a87\0\u0ab8"+
    "\0\u0126\0\u0ae9\0\u0b1a\0\u0b4b\0\u0b7c\0\u0bad\0\u0126\0\u0126"+
    "\0\u0126\0\u0126\0\u0bde\0\u0c0f\0\u0c40\0\u0126\0\u0126\0\u0c71"+
    "\0\u0ca2\0\u0cd3\0\u0d04\0\u0d35\0\u0126\0\u0d66\0\u0d97\0\u0126"+
    "\0\u0126\0\61\0\u0dc8\0\u0df9\0\u0126";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[101];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\2\1\5\1\6\1\7\1\10"+
    "\1\11\1\2\1\12\1\13\1\14\1\15\1\10\1\16"+
    "\2\10\1\17\1\20\1\21\4\10\1\22\1\23\1\24"+
    "\2\10\1\25\1\26\1\27\1\30\1\31\1\32\1\10"+
    "\1\33\2\10\1\2\1\10\1\34\2\10\1\35\2\10"+
    "\62\0\2\3\61\0\1\36\1\37\62\0\1\6\60\0"+
    "\1\6\1\40\57\0\1\10\1\0\1\10\3\0\17\10"+
    "\1\0\3\10\6\0\1\10\1\0\2\10\1\0\7\10"+
    "\11\41\1\42\1\43\46\41\12\44\1\45\1\42\45\44"+
    "\6\0\1\10\1\0\1\10\3\0\1\10\1\46\13\10"+
    "\1\47\1\10\1\0\3\10\6\0\1\10\1\0\2\10"+
    "\1\0\7\10\6\0\1\10\1\0\1\10\3\0\6\10"+
    "\1\50\10\10\1\0\3\10\6\0\1\10\1\0\2\10"+
    "\1\0\7\10\6\0\1\10\1\0\1\10\3\0\7\10"+
    "\1\51\7\10\1\0\3\10\6\0\1\10\1\0\2\10"+
    "\1\0\7\10\6\0\1\10\1\0\1\10\3\0\5\10"+
    "\1\52\11\10\1\0\3\10\6\0\1\10\1\0\2\10"+
    "\1\0\7\10\6\0\1\10\1\0\1\10\3\0\14\10"+
    "\1\53\2\10\1\0\3\10\6\0\1\10\1\0\2\10"+
    "\1\0\7\10\6\0\1\10\1\0\1\10\3\0\3\10"+
    "\1\54\13\10\1\0\3\10\6\0\1\10\1\0\2\10"+
    "\1\0\7\10\6\0\1\10\1\0\1\10\3\0\2\10"+
    "\1\55\14\10\1\0\2\10\1\56\6\0\1\10\1\0"+
    "\2\10\1\0\7\10\6\0\1\10\1\0\1\10\3\0"+
    "\4\10\1\57\12\10\1\0\3\10\6\0\1\10\1\0"+
    "\2\10\1\0\7\10\6\0\1\10\1\0\1\10\3\0"+
    "\7\10\1\60\7\10\1\0\3\10\6\0\1\10\1\0"+
    "\2\10\1\0\7\10\46\0\1\61\20\0\1\10\1\0"+
    "\1\10\3\0\17\10\1\0\3\10\6\0\1\10\1\0"+
    "\2\10\1\0\2\10\1\62\4\10\6\0\1\10\1\0"+
    "\1\10\3\0\17\10\1\0\3\10\6\0\1\10\1\0"+
    "\2\10\1\0\5\10\1\63\1\10\1\36\1\0\57\36"+
    "\4\37\1\64\54\37\6\0\1\40\52\0\1\41\1\0"+
    "\57\41\1\44\1\0\57\44\6\0\1\10\1\0\1\10"+
    "\3\0\2\10\1\65\14\10\1\0\3\10\6\0\1\10"+
    "\1\0\2\10\1\0\7\10\6\0\1\10\1\0\1\10"+
    "\3\0\16\10\1\66\1\0\3\10\6\0\1\10\1\0"+
    "\2\10\1\0\7\10\6\0\1\10\1\0\1\10\3\0"+
    "\6\10\1\67\10\10\1\0\3\10\6\0\1\10\1\0"+
    "\2\10\1\0\7\10\6\0\1\10\1\0\1\10\3\0"+
    "\17\10\1\0\3\10\6\0\1\10\1\0\2\10\1\0"+
    "\1\70\6\10\6\0\1\10\1\0\1\10\3\0\6\10"+
    "\1\71\10\10\1\0\3\10\6\0\1\10\1\0\2\10"+
    "\1\0\7\10\6\0\1\10\1\0\1\10\3\0\4\10"+
    "\1\72\12\10\1\0\3\10\6\0\1\10\1\0\2\10"+
    "\1\0\7\10\6\0\1\10\1\0\1\10\3\0\11\10"+
    "\1\73\5\10\1\0\3\10\6\0\1\10\1\0\2\10"+
    "\1\0\7\10\6\0\1\10\1\0\1\10\3\0\13\10"+
    "\1\74\3\10\1\0\3\10\6\0\1\10\1\0\2\10"+
    "\1\0\7\10\6\0\1\10\1\0\1\10\3\0\6\10"+
    "\1\75\10\10\1\0\3\10\6\0\1\10\1\0\2\10"+
    "\1\0\7\10\6\0\1\10\1\0\1\10\3\0\4\10"+
    "\1\76\12\10\1\0\3\10\6\0\1\10\1\0\2\10"+
    "\1\0\7\10\6\0\1\10\1\0\1\10\3\0\15\10"+
    "\1\77\1\10\1\0\1\10\1\100\1\10\6\0\1\10"+
    "\1\0\2\10\1\0\7\10\47\0\1\101\17\0\1\10"+
    "\1\0\1\10\3\0\17\10\1\0\3\10\6\0\1\10"+
    "\1\0\2\10\1\0\3\10\1\102\3\10\6\0\1\10"+
    "\1\0\1\10\3\0\17\10\1\0\3\10\6\0\1\10"+
    "\1\0\2\10\1\0\6\10\1\103\3\37\1\104\1\64"+
    "\54\37\6\0\1\10\1\0\1\10\3\0\3\10\1\105"+
    "\13\10\1\0\3\10\6\0\1\10\1\0\2\10\1\0"+
    "\7\10\6\0\1\10\1\0\1\10\3\0\3\10\1\106"+
    "\13\10\1\0\3\10\6\0\1\10\1\0\2\10\1\0"+
    "\7\10\6\0\1\10\1\0\1\10\3\0\1\10\1\107"+
    "\15\10\1\0\3\10\6\0\1\10\1\0\2\10\1\0"+
    "\7\10\6\0\1\10\1\0\1\10\3\0\15\10\1\110"+
    "\1\10\1\0\3\10\6\0\1\10\1\0\2\10\1\0"+
    "\7\10\6\0\1\10\1\0\1\10\3\0\7\10\1\111"+
    "\7\10\1\0\3\10\6\0\1\10\1\0\2\10\1\0"+
    "\7\10\6\0\1\10\1\0\1\10\3\0\7\10\1\112"+
    "\7\10\1\0\3\10\6\0\1\10\1\0\2\10\1\0"+
    "\7\10\6\0\1\10\1\0\1\10\3\0\2\10\1\113"+
    "\14\10\1\0\3\10\6\0\1\10\1\0\2\10\1\0"+
    "\7\10\6\0\1\10\1\0\1\10\3\0\7\10\1\114"+
    "\7\10\1\0\3\10\6\0\1\10\1\0\2\10\1\0"+
    "\7\10\6\0\1\10\1\0\1\10\3\0\1\10\1\115"+
    "\15\10\1\0\3\10\6\0\1\10\1\0\2\10\1\0"+
    "\7\10\45\0\1\116\21\0\1\10\1\0\1\10\3\0"+
    "\17\10\1\0\3\10\6\0\1\10\1\0\1\10\1\117"+
    "\1\0\7\10\6\0\1\10\1\0\1\10\3\0\17\10"+
    "\1\0\3\10\6\0\1\10\1\0\1\120\1\10\1\0"+
    "\7\10\6\0\1\10\1\0\1\10\3\0\4\10\1\121"+
    "\12\10\1\0\3\10\6\0\1\10\1\0\2\10\1\0"+
    "\7\10\6\0\1\10\1\0\1\10\3\0\3\10\1\122"+
    "\13\10\1\0\3\10\6\0\1\10\1\0\2\10\1\0"+
    "\7\10\6\0\1\10\1\0\1\10\3\0\3\10\1\123"+
    "\13\10\1\0\3\10\6\0\1\10\1\0\2\10\1\0"+
    "\7\10\6\0\1\10\1\0\1\10\3\0\11\10\1\124"+
    "\5\10\1\0\3\10\6\0\1\10\1\0\2\10\1\0"+
    "\7\10\6\0\1\10\1\0\1\10\3\0\2\10\1\125"+
    "\14\10\1\0\3\10\6\0\1\10\1\0\2\10\1\0"+
    "\7\10\6\0\1\10\1\0\1\10\3\0\12\10\1\126"+
    "\4\10\1\0\3\10\6\0\1\10\1\0\2\10\1\0"+
    "\7\10\6\0\1\10\1\0\1\10\3\0\14\10\1\127"+
    "\2\10\1\0\3\10\6\0\1\10\1\0\2\10\1\0"+
    "\7\10\6\0\1\10\1\0\1\10\3\0\17\10\1\0"+
    "\1\130\2\10\6\0\1\10\1\0\2\10\1\0\7\10"+
    "\50\0\1\131\16\0\1\10\1\0\1\10\3\0\11\10"+
    "\1\132\5\10\1\0\3\10\6\0\1\10\1\0\2\10"+
    "\1\0\7\10\6\0\1\10\1\0\1\10\3\0\2\10"+
    "\1\133\14\10\1\0\3\10\6\0\1\10\1\0\2\10"+
    "\1\0\7\10\6\0\1\10\1\0\1\10\3\0\13\10"+
    "\1\134\3\10\1\0\3\10\6\0\1\10\1\0\2\10"+
    "\1\0\7\10\6\0\1\10\1\0\1\10\3\0\4\10"+
    "\1\135\12\10\1\0\3\10\6\0\1\10\1\0\2\10"+
    "\1\0\7\10\51\0\1\136\15\0\1\10\1\0\1\10"+
    "\3\0\4\10\1\137\12\10\1\0\3\10\6\0\1\10"+
    "\1\0\2\10\1\0\7\10\6\0\1\10\1\0\1\10"+
    "\3\0\7\10\1\140\7\10\1\0\3\10\6\0\1\10"+
    "\1\0\2\10\1\0\7\10\6\0\1\10\1\0\1\10"+
    "\3\0\3\10\1\141\13\10\1\0\3\10\6\0\1\10"+
    "\1\0\2\10\1\0\7\10\51\0\1\142\15\0\1\10"+
    "\1\0\1\10\3\0\7\10\1\143\7\10\1\0\3\10"+
    "\6\0\1\10\1\0\2\10\1\0\7\10\6\0\1\10"+
    "\1\0\1\10\3\0\17\10\1\0\3\10\6\0\1\144"+
    "\1\0\2\10\1\0\7\10\6\0\1\10\1\0\1\10"+
    "\3\0\17\10\1\0\1\10\1\145\1\10\6\0\1\10"+
    "\1\0\2\10\1\0\7\10";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3626];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\13\1\1\11\1\1\6\11"+
    "\4\1\1\0\1\1\1\0\1\11\3\0\13\1\1\0"+
    "\2\1\1\0\14\1\1\0\14\1\1\0\12\1\1\0"+
    "\4\1\1\0\3\1\1\11\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[101];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _GCMLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _GCMLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            }
          case 31: break;
          case 2: 
            { return WHITE_SPACE;
            }
          case 32: break;
          case 3: 
            { return NUMBER;
            }
          case 33: break;
          case 4: 
            { return POINT;
            }
          case 34: break;
          case 5: 
            { return IDENT;
            }
          case 35: break;
          case 6: 
            { return EQUALS;
            }
          case 36: break;
          case 7: 
            { return COMMA;
            }
          case 37: break;
          case 8: 
            { return COLON;
            }
          case 38: break;
          case 9: 
            { return BODY_OPEN;
            }
          case 39: break;
          case 10: 
            { return BODY_CLOSE;
            }
          case 40: break;
          case 11: 
            { return POPEN;
            }
          case 41: break;
          case 12: 
            { return PCLOSE;
            }
          case 42: break;
          case 13: 
            { return LINE_COMMENT;
            }
          case 43: break;
          case 14: 
            { return STRING;
            }
          case 44: break;
          case 15: 
            { return ATT;
            }
          case 45: break;
          case 16: 
            { return REL;
            }
          case 46: break;
          case 17: 
            { return REF;
            }
          case 47: break;
          case 18: 
            { return BLOCK_COMMENT;
            }
          case 48: break;
          case 19: 
            { return TYPE;
            }
          case 49: break;
          case 20: 
            { return CRLF;
            }
          case 50: break;
          case 21: 
            { return NAME;
            }
          case 51: break;
          case 22: 
            { return CONST;
            }
          case 52: break;
          case 23: 
            { return CLASS;
            }
          case 53: break;
          case 24: 
            { return USING;
            }
          case 54: break;
          case 25: 
            { return INDEX;
            }
          case 55: break;
          case 26: 
            { return IMPORT;
            }
          case 56: break;
          case 27: 
            { return NEWLINE;
            }
          case 57: break;
          case 28: 
            { return EXTENDS;
            }
          case 58: break;
          case 29: 
            { return EOF;
            }
          case 59: break;
          case 30: 
            { return OPPOSITE_OF;
            }
          case 60: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
