/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package greycat.idea;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static greycat.idea.psi.GCMTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>_GCMLexer.flex</tt>
 */
public class _GCMLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
<<<<<<< 50e0da97b4bfe492c7595f1363ff378d9028067a
    "\11\0\1\2\4\1\22\0\1\16\1\0\1\12\4\0\1\10\1\44\1\45\1\7\1\0\1\40\1\4\1\6\1"+
    "\3\12\5\1\41\1\0\1\46\1\0\1\52\2\0\1\7\1\63\1\53\1\60\1\47\1\51\2\7\1\56\2"+
    "\7\1\55\1\7\1\57\1\50\2\7\1\54\5\7\1\61\1\64\1\7\1\32\1\11\1\33\1\0\1\62\1"+
    "\0\1\24\1\7\1\26\1\37\1\14\1\35\1\7\1\22\1\20\1\7\1\13\1\27\1\23\1\30\3\7"+
    "\1\34\1\25\1\21\1\31\1\7\1\17\1\36\1\15\1\7\1\42\1\0\1\43\7\0\1\1\32\0\1\2"+
    "\337\0\1\2\177\0\13\2\35\0\2\1\5\0\1\2\57\0\1\2\40\0");
=======
    "\11\0\1\2\4\1\22\0\1\2\1\0\1\13\4\0\1\11\1\43\1\44\1\4\1\0\1\37\1\5\1\7\1"+
    "\3\12\6\1\40\1\0\1\45\1\33\1\51\2\0\2\10\1\53\1\10\1\46\1\50\5\10\1\55\2\10"+
    "\1\47\2\10\1\54\10\10\1\0\1\12\2\0\1\10\1\0\1\32\1\10\1\14\1\27\1\23\1\35"+
    "\1\26\1\10\1\25\2\10\1\31\1\36\1\16\1\15\1\22\1\10\1\34\1\17\1\20\1\24\1\10"+
    "\1\52\1\30\1\21\1\10\1\41\1\0\1\42\7\0\1\1\32\0\1\2\337\0\1\2\177\0\13\2\35"+
    "\0\2\1\5\0\1\2\57\0\1\2\40\0");
>>>>>>> 44ffb72f7837a15c79487ff6d0cc87870a9bc0d5

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
<<<<<<< 50e0da97b4bfe492c7595f1363ff378d9028067a
    "\1\0\1\1\1\2\1\1\1\3\1\4\1\5\1\3"+
    "\2\1\5\3\1\1\1\3\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\1\2\3\1\14\1\4\1\0\1\15"+
    "\3\0\4\3\1\16\2\3\1\17\1\3\1\0\2\3"+
    "\1\20\2\3\1\21\2\3\1\22\1\23\1\0\2\3"+
    "\1\0\1\24\3\3\1\0\1\25\1\3\1\0\1\3"+
    "\1\26\1\3\1\0\1\3\1\0\2\3\1\0\1\3"+
    "\1\0\1\27\1\30\1\31\1\3\1\0\1\3\1\0"+
    "\1\3\1\0\1\32\2\0\1\33";

  private static int [] zzUnpackAction() {
    int [] result = new int[89];
=======
    "\1\0\1\1\1\2\2\1\1\3\1\4\1\5\2\1"+
    "\7\5\1\6\1\5\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\1\1\5\1\15\1\0\1\3\1\0\1\16"+
    "\3\0\12\5\1\0\1\5\1\0\10\5\1\17\1\20"+
    "\1\21\1\0\1\5\1\22\3\5\1\23\4\5\1\0"+
    "\1\24\1\25\1\26\2\5\1\27\1\30\1\5\1\0"+
    "\2\5\1\31\1\0\1\32\1\33\1\34";

  private static int [] zzUnpackAction() {
    int [] result = new int[87];
>>>>>>> 44ffb72f7837a15c79487ff6d0cc87870a9bc0d5
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
<<<<<<< 50e0da97b4bfe492c7595f1363ff378d9028067a
    "\0\0\0\65\0\152\0\237\0\324\0\u0109\0\u013e\0\u013e"+
    "\0\u0173\0\u01a8\0\u01dd\0\u0212\0\u0247\0\u027c\0\u02b1\0\u02e6"+
    "\0\u031b\0\65\0\65\0\65\0\65\0\65\0\65\0\u0350"+
    "\0\u0385\0\u03ba\0\u03ef\0\u0424\0\u0173\0\65\0\u0459\0\u01a8"+
    "\0\u048e\0\u04c3\0\u04f8\0\u052d\0\u0562\0\u013e\0\u0597\0\u05cc"+
    "\0\65\0\u0601\0\u0636\0\u066b\0\u06a0\0\u06d5\0\u070a\0\u073f"+
    "\0\u013e\0\u0774\0\u07a9\0\u013e\0\u013e\0\u07de\0\u0813\0\u0848"+
    "\0\u087d\0\u013e\0\u08b2\0\u08e7\0\u091c\0\u0951\0\u013e\0\u0986"+
    "\0\u09bb\0\u09f0\0\u013e\0\u0a25\0\u0a5a\0\u0a8f\0\u0ac4\0\u0af9"+
    "\0\u0b2e\0\u0b63\0\u0b98\0\u0bcd\0\u013e\0\u013e\0\65\0\u0c02"+
    "\0\u0c37\0\u0c6c\0\u0ca1\0\u0cd6\0\u0d0b\0\u013e\0\u0d40\0\u0d75"+
    "\0\65";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[89];
=======
    "\0\0\0\56\0\134\0\212\0\270\0\346\0\56\0\u0114"+
    "\0\u0142\0\u0170\0\u019e\0\u01cc\0\u01fa\0\u0228\0\u0256\0\u0284"+
    "\0\u02b2\0\56\0\u02e0\0\56\0\56\0\56\0\56\0\56"+
    "\0\56\0\u030e\0\u033c\0\u036a\0\u0398\0\u03c6\0\u0142\0\56"+
    "\0\u03f4\0\u0170\0\u0422\0\u0450\0\u047e\0\u04ac\0\u04da\0\u0508"+
    "\0\u0536\0\u0564\0\u0592\0\u05c0\0\u05ee\0\u061c\0\u064a\0\u0678"+
    "\0\u06a6\0\u06d4\0\u0702\0\u0730\0\u075e\0\u078c\0\u07ba\0\u07e8"+
    "\0\u0114\0\u0114\0\u0114\0\u0816\0\u0844\0\u0398\0\u0872\0\u08a0"+
    "\0\u08ce\0\u0114\0\u08fc\0\u092a\0\u0958\0\u0986\0\u09b4\0\u0114"+
    "\0\u0114\0\u0114\0\u09e2\0\u0a10\0\u0114\0\u0114\0\u0a3e\0\u0a6c"+
    "\0\u0a9a\0\u0ac8\0\u0114\0\u0af6\0\u0114\0\u0114\0\56";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[87];
>>>>>>> 44ffb72f7837a15c79487ff6d0cc87870a9bc0d5
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
<<<<<<< 50e0da97b4bfe492c7595f1363ff378d9028067a
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\2\1\12\1\13\1\14\1\10\1\3\5\10\1\15"+
    "\1\10\1\16\1\10\1\17\1\10\1\20\1\2\1\21"+
    "\3\10\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\3\10\1\2\1\31\2\10\1\32\6\10\66\0\2\3"+
    "\13\0\1\3\51\0\1\33\65\0\1\10\1\6\2\10"+
    "\3\0\3\10\1\0\13\10\2\0\4\10\7\0\3\10"+
    "\1\0\12\10\4\0\1\10\1\6\1\34\1\10\3\0"+
    "\3\10\1\0\13\10\2\0\4\10\7\0\3\10\1\0"+
    "\12\10\4\0\4\10\3\0\3\10\1\0\13\10\2\0"+
    "\4\10\7\0\3\10\1\0\12\10\10\35\1\36\1\37"+
    "\53\35\11\40\1\41\1\36\52\40\4\0\4\10\3\0"+
    "\1\10\1\42\1\10\1\0\13\10\2\0\4\10\7\0"+
    "\3\10\1\0\12\10\4\0\4\10\3\0\3\10\1\0"+
    "\11\10\1\43\1\10\2\0\2\10\1\44\1\10\7\0"+
    "\3\10\1\0\12\10\4\0\4\10\3\0\3\10\1\0"+
    "\2\10\1\45\3\10\1\46\4\10\2\0\4\10\7\0"+
    "\3\10\1\0\12\10\4\0\4\10\3\0\3\10\1\0"+
    "\10\10\1\47\2\10\2\0\4\10\7\0\3\10\1\0"+
    "\12\10\4\0\4\10\3\0\1\10\1\50\1\10\1\0"+
    "\13\10\2\0\4\10\7\0\3\10\1\0\12\10\33\0"+
    "\1\51\35\0\4\10\3\0\1\10\1\52\1\10\1\0"+
    "\13\10\2\0\4\10\7\0\3\10\1\0\12\10\46\0"+
    "\1\53\22\0\4\10\3\0\3\10\1\0\13\10\2\0"+
    "\4\10\7\0\3\10\1\0\1\10\1\54\10\10\4\0"+
    "\4\10\3\0\3\10\1\0\13\10\2\0\4\10\7\0"+
    "\3\10\1\0\4\10\1\55\5\10\1\33\1\0\63\33"+
    "\4\0\1\10\1\34\2\10\3\0\3\10\1\0\13\10"+
    "\2\0\4\10\7\0\3\10\1\0\12\10\1\35\1\0"+
    "\63\35\1\40\1\0\63\40\4\0\4\10\3\0\2\10"+
    "\1\56\1\0\13\10\2\0\4\10\7\0\3\10\1\0"+
    "\12\10\4\0\4\10\3\0\3\10\1\0\12\10\1\57"+
    "\2\0\4\10\7\0\3\10\1\0\12\10\4\0\4\10"+
    "\3\0\3\10\1\0\2\10\1\60\10\10\2\0\4\10"+
    "\7\0\3\10\1\0\12\10\4\0\4\10\3\0\3\10"+
    "\1\0\2\10\1\61\10\10\2\0\4\10\7\0\3\10"+
    "\1\0\12\10\4\0\4\10\3\0\3\10\1\0\5\10"+
    "\1\62\5\10\2\0\4\10\7\0\3\10\1\0\12\10"+
    "\4\0\4\10\3\0\3\10\1\0\1\63\12\10\2\0"+
    "\4\10\7\0\3\10\1\0\12\10\4\0\4\10\3\0"+
    "\3\10\1\0\10\10\1\64\2\10\2\0\1\10\1\65"+
    "\2\10\7\0\3\10\1\0\12\10\47\0\1\66\21\0"+
    "\4\10\3\0\3\10\1\0\13\10\2\0\4\10\7\0"+
    "\3\10\1\0\2\10\1\67\7\10\4\0\4\10\3\0"+
    "\3\10\1\0\13\10\2\0\4\10\7\0\3\10\1\0"+
    "\5\10\1\70\4\10\4\0\4\10\3\0\3\10\1\71"+
    "\13\10\2\0\4\10\7\0\3\10\1\0\12\10\4\0"+
    "\4\10\3\0\3\10\1\0\4\10\1\72\6\10\2\0"+
    "\4\10\7\0\3\10\1\0\12\10\4\0\4\10\3\0"+
    "\1\10\1\73\1\10\1\0\13\10\2\0\4\10\7\0"+
    "\3\10\1\0\12\10\4\0\4\10\3\0\3\10\1\0"+
    "\6\10\1\74\4\10\2\0\4\10\7\0\3\10\1\0"+
    "\12\10\4\0\4\10\3\0\3\10\1\0\10\10\1\75"+
    "\2\10\2\0\4\10\7\0\3\10\1\0\12\10\50\0"+
    "\1\76\20\0\4\10\3\0\3\10\1\0\13\10\2\0"+
    "\4\10\7\0\2\10\1\77\1\0\12\10\4\0\4\10"+
    "\3\0\3\10\1\0\13\10\2\0\4\10\7\0\1\100"+
    "\2\10\1\0\12\10\17\0\1\101\51\0\4\10\3\0"+
    "\3\10\1\0\11\10\1\102\1\10\2\0\4\10\7\0"+
    "\3\10\1\0\12\10\4\0\4\10\3\0\3\10\1\0"+
    "\6\10\1\103\4\10\2\0\4\10\7\0\3\10\1\0"+
    "\12\10\4\0\4\10\3\0\3\10\1\0\1\10\1\104"+
    "\11\10\2\0\4\10\7\0\3\10\1\0\12\10\51\0"+
    "\1\105\17\0\4\10\3\0\3\10\1\0\13\10\2\0"+
    "\4\10\7\0\3\10\1\0\6\10\1\106\3\10\20\0"+
    "\1\107\50\0\4\10\3\0\3\10\1\0\13\10\2\0"+
    "\3\10\1\110\7\0\3\10\1\0\12\10\4\0\4\10"+
    "\3\0\3\10\1\0\11\10\1\111\1\10\2\0\4\10"+
    "\7\0\3\10\1\0\12\10\52\0\1\112\16\0\4\10"+
    "\3\0\3\10\1\0\13\10\2\0\4\10\7\0\1\113"+
    "\2\10\1\0\12\10\21\0\1\114\47\0\4\10\3\0"+
    "\3\10\1\0\6\10\1\115\4\10\2\0\4\10\7\0"+
    "\3\10\1\0\12\10\4\0\4\10\3\0\1\10\1\116"+
    "\1\10\1\0\13\10\2\0\4\10\7\0\3\10\1\0"+
    "\12\10\52\0\1\117\16\0\4\10\3\0\3\10\1\0"+
    "\13\10\2\0\4\10\7\0\3\10\1\0\5\10\1\120"+
    "\4\10\22\0\1\121\46\0\4\10\3\0\3\10\1\0"+
    "\13\10\2\0\4\10\7\0\3\10\1\0\7\10\1\122"+
    "\2\10\16\0\1\123\52\0\4\10\3\0\3\10\1\0"+
    "\13\10\2\0\4\10\7\0\3\10\1\0\10\10\1\124"+
    "\1\10\21\0\1\125\47\0\4\10\3\0\3\10\1\0"+
    "\13\10\2\0\4\10\7\0\3\10\1\0\11\10\1\126"+
    "\20\0\1\127\67\0\1\130\55\0\1\131\50\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3498];
=======
    "\1\2\2\3\1\4\1\2\1\5\1\6\1\7\1\10"+
    "\1\11\1\2\1\12\1\13\1\10\1\14\1\10\1\15"+
    "\2\10\1\16\1\17\1\20\4\10\1\21\1\22\1\23"+
    "\2\10\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\3\10\1\2\1\10\1\33\2\10\57\0\2\3\56\0"+
    "\1\34\1\35\57\0\1\6\55\0\1\6\1\36\54\0"+
    "\1\10\1\0\1\10\3\0\17\10\1\0\3\10\7\0"+
    "\3\10\1\0\4\10\11\37\1\40\1\41\43\37\12\42"+
    "\1\43\1\40\42\42\6\0\1\10\1\0\1\10\3\0"+
    "\1\10\1\44\13\10\1\45\1\10\1\0\3\10\7\0"+
    "\3\10\1\0\4\10\6\0\1\10\1\0\1\10\3\0"+
    "\7\10\1\46\7\10\1\0\3\10\7\0\3\10\1\0"+
    "\4\10\6\0\1\10\1\0\1\10\3\0\5\10\1\47"+
    "\11\10\1\0\3\10\7\0\3\10\1\0\4\10\6\0"+
    "\1\10\1\0\1\10\3\0\14\10\1\50\2\10\1\0"+
    "\3\10\7\0\3\10\1\0\4\10\6\0\1\10\1\0"+
    "\1\10\3\0\3\10\1\51\13\10\1\0\3\10\7\0"+
    "\3\10\1\0\4\10\6\0\1\10\1\0\1\10\3\0"+
    "\2\10\1\52\14\10\1\0\2\10\1\53\7\0\3\10"+
    "\1\0\4\10\6\0\1\10\1\0\1\10\3\0\4\10"+
    "\1\54\12\10\1\0\3\10\7\0\3\10\1\0\4\10"+
    "\6\0\1\10\1\0\1\10\3\0\7\10\1\55\7\10"+
    "\1\0\3\10\7\0\3\10\1\0\4\10\45\0\1\56"+
    "\16\0\1\10\1\0\1\10\3\0\17\10\1\0\3\10"+
    "\7\0\3\10\1\0\2\10\1\57\1\10\1\34\1\0"+
    "\54\34\4\35\1\60\51\35\6\0\1\36\47\0\1\37"+
    "\1\0\54\37\1\42\1\0\54\42\6\0\1\10\1\0"+
    "\1\10\3\0\2\10\1\61\14\10\1\0\3\10\7\0"+
    "\3\10\1\0\4\10\6\0\1\10\1\0\1\10\3\0"+
    "\16\10\1\62\1\0\3\10\7\0\3\10\1\0\4\10"+
    "\6\0\1\10\1\0\1\10\3\0\17\10\1\0\3\10"+
    "\7\0\3\10\1\0\1\63\3\10\6\0\1\10\1\0"+
    "\1\10\3\0\6\10\1\64\10\10\1\0\3\10\7\0"+
    "\3\10\1\0\4\10\6\0\1\10\1\0\1\10\3\0"+
    "\4\10\1\65\12\10\1\0\3\10\7\0\3\10\1\0"+
    "\4\10\6\0\1\10\1\0\1\10\3\0\11\10\1\66"+
    "\5\10\1\0\3\10\7\0\3\10\1\0\4\10\6\0"+
    "\1\10\1\0\1\10\3\0\13\10\1\67\3\10\1\0"+
    "\3\10\7\0\3\10\1\0\4\10\6\0\1\10\1\0"+
    "\1\10\3\0\6\10\1\70\10\10\1\0\3\10\7\0"+
    "\3\10\1\0\4\10\6\0\1\10\1\0\1\10\3\0"+
    "\4\10\1\71\12\10\1\0\3\10\7\0\3\10\1\0"+
    "\4\10\6\0\1\10\1\0\1\10\3\0\15\10\1\72"+
    "\1\10\1\0\1\10\1\73\1\10\7\0\3\10\1\0"+
    "\4\10\46\0\1\74\15\0\1\10\1\0\1\10\3\0"+
    "\17\10\1\0\3\10\7\0\3\10\1\0\3\10\1\75"+
    "\3\35\1\76\1\60\51\35\6\0\1\10\1\0\1\10"+
    "\3\0\3\10\1\77\13\10\1\0\3\10\7\0\3\10"+
    "\1\0\4\10\6\0\1\10\1\0\1\10\3\0\3\10"+
    "\1\100\13\10\1\0\3\10\7\0\3\10\1\0\4\10"+
    "\6\0\1\10\1\0\1\10\3\0\15\10\1\101\1\10"+
    "\1\0\3\10\7\0\3\10\1\0\4\10\6\0\1\10"+
    "\1\0\1\10\3\0\7\10\1\102\7\10\1\0\3\10"+
    "\7\0\3\10\1\0\4\10\6\0\1\10\1\0\1\10"+
    "\3\0\7\10\1\103\7\10\1\0\3\10\7\0\3\10"+
    "\1\0\4\10\6\0\1\10\1\0\1\10\3\0\2\10"+
    "\1\104\14\10\1\0\3\10\7\0\3\10\1\0\4\10"+
    "\6\0\1\10\1\0\1\10\3\0\7\10\1\105\7\10"+
    "\1\0\3\10\7\0\3\10\1\0\4\10\6\0\1\10"+
    "\1\0\1\10\3\0\1\10\1\106\15\10\1\0\3\10"+
    "\7\0\3\10\1\0\4\10\47\0\1\107\14\0\1\10"+
    "\1\0\1\10\3\0\17\10\1\0\3\10\7\0\2\10"+
    "\1\110\1\0\4\10\6\0\1\10\1\0\1\10\3\0"+
    "\4\10\1\111\12\10\1\0\3\10\7\0\3\10\1\0"+
    "\4\10\6\0\1\10\1\0\1\10\3\0\3\10\1\112"+
    "\13\10\1\0\3\10\7\0\3\10\1\0\4\10\6\0"+
    "\1\10\1\0\1\10\3\0\11\10\1\113\5\10\1\0"+
    "\3\10\7\0\3\10\1\0\4\10\6\0\1\10\1\0"+
    "\1\10\3\0\2\10\1\114\14\10\1\0\3\10\7\0"+
    "\3\10\1\0\4\10\6\0\1\10\1\0\1\10\3\0"+
    "\12\10\1\115\4\10\1\0\3\10\7\0\3\10\1\0"+
    "\4\10\6\0\1\10\1\0\1\10\3\0\14\10\1\116"+
    "\2\10\1\0\3\10\7\0\3\10\1\0\4\10\6\0"+
    "\1\10\1\0\1\10\3\0\17\10\1\0\1\117\2\10"+
    "\7\0\3\10\1\0\4\10\50\0\1\120\13\0\1\10"+
    "\1\0\1\10\3\0\2\10\1\121\14\10\1\0\3\10"+
    "\7\0\3\10\1\0\4\10\6\0\1\10\1\0\1\10"+
    "\3\0\13\10\1\122\3\10\1\0\3\10\7\0\3\10"+
    "\1\0\4\10\6\0\1\10\1\0\1\10\3\0\4\10"+
    "\1\123\12\10\1\0\3\10\7\0\3\10\1\0\4\10"+
    "\51\0\1\124\12\0\1\10\1\0\1\10\3\0\7\10"+
    "\1\125\7\10\1\0\3\10\7\0\3\10\1\0\4\10"+
    "\6\0\1\10\1\0\1\10\3\0\3\10\1\126\13\10"+
    "\1\0\3\10\7\0\3\10\1\0\4\10\51\0\1\127"+
    "\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2852];
>>>>>>> 44ffb72f7837a15c79487ff6d0cc87870a9bc0d5
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
<<<<<<< 50e0da97b4bfe492c7595f1363ff378d9028067a
    "\1\0\1\11\17\1\6\11\5\1\1\0\1\11\3\0"+
    "\7\1\1\11\1\1\1\0\12\1\1\0\2\1\1\0"+
    "\4\1\1\0\2\1\1\0\3\1\1\0\1\1\1\0"+
    "\2\1\1\0\1\1\1\0\2\1\1\11\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\2\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[89];
=======
    "\1\0\1\11\4\1\1\11\12\1\1\11\1\1\6\11"+
    "\3\1\1\0\1\1\1\0\1\11\3\0\12\1\1\0"+
    "\1\1\1\0\13\1\1\0\12\1\1\0\10\1\1\0"+
    "\3\1\1\0\2\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[87];
>>>>>>> 44ffb72f7837a15c79487ff6d0cc87870a9bc0d5
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _GCMLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _GCMLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            }
<<<<<<< 50e0da97b4bfe492c7595f1363ff378d9028067a
          case 28: break;
          case 2: 
            { return WHITE_SPACE;
            }
          case 29: break;
          case 3: 
            { return IDENT;
            }
          case 30: break;
          case 4: 
            { return NUMBER;
            }
          case 31: break;
          case 5: 
            { return MULT_SEP;
            }
          case 32: break;
          case 6: 
            { return COMMA;
            }
          case 33: break;
          case 7: 
            { return COLON;
            }
          case 34: break;
          case 8: 
            { return BODY_OPEN;
            }
          case 35: break;
          case 9: 
            { return BODY_CLOSE;
            }
          case 36: break;
          case 10: 
            { return ANNOT_PARAM_OPEN;
            }
          case 37: break;
          case 11: 
            { return ANNOT_PARAM_CLOSE;
            }
          case 38: break;
          case 12: 
            { return COMMENT;
            }
          case 39: break;
          case 13: 
            { return STRING;
            }
          case 40: break;
          case 14: 
            { return AS;
            }
          case 41: break;
          case 15: 
            { return ARRAY;
            }
          case 42: break;
          case 16: 
            { return KEY;
            }
          case 43: break;
          case 17: 
            { return ATT;
            }
          case 44: break;
          case 18: 
            { return REL;
            }
          case 45: break;
          case 19: 
            { return REF;
            }
          case 46: break;
          case 20: 
            { return ENUM;
            }
          case 47: break;
          case 21: 
            { return CRLF;
            }
          case 48: break;
          case 22: 
            { return CLASS;
            }
          case 49: break;
          case 23: 
            { return EXTENDS;
            }
          case 50: break;
          case 24: 
            { return NEWLINE;
            }
          case 51: break;
          case 25: 
            { return EOF;
            }
          case 52: break;
          case 26: 
            { return INDEXED_BY;
            }
          case 53: break;
          case 27: 
            { return KEY_WITH_TIME;
            }
          case 54: break;
=======
          case 29: break;
          case 2: 
            { return WHITE_SPACE;
            }
          case 30: break;
          case 3: 
            { return NUMBER;
            }
          case 31: break;
          case 4: 
            { return POINT;
            }
          case 32: break;
          case 5: 
            { return IDENT;
            }
          case 33: break;
          case 6: 
            { return EQUALS;
            }
          case 34: break;
          case 7: 
            { return COMMA;
            }
          case 35: break;
          case 8: 
            { return COLON;
            }
          case 36: break;
          case 9: 
            { return BODY_OPEN;
            }
          case 37: break;
          case 10: 
            { return BODY_CLOSE;
            }
          case 38: break;
          case 11: 
            { return POPEN;
            }
          case 39: break;
          case 12: 
            { return PCLOSE;
            }
          case 40: break;
          case 13: 
            { return LINE_COMMENT;
            }
          case 41: break;
          case 14: 
            { return STRING;
            }
          case 42: break;
          case 15: 
            { return ATT;
            }
          case 43: break;
          case 16: 
            { return REL;
            }
          case 44: break;
          case 17: 
            { return REF;
            }
          case 45: break;
          case 18: 
            { return BLOCK_COMMENT;
            }
          case 46: break;
          case 19: 
            { return TYPE;
            }
          case 47: break;
          case 20: 
            { return CRLF;
            }
          case 48: break;
          case 21: 
            { return CONST;
            }
          case 49: break;
          case 22: 
            { return CLASS;
            }
          case 50: break;
          case 23: 
            { return USING;
            }
          case 51: break;
          case 24: 
            { return INDEX;
            }
          case 52: break;
          case 25: 
            { return IMPORT;
            }
          case 53: break;
          case 26: 
            { return NEWLINE;
            }
          case 54: break;
          case 27: 
            { return EXTENDS;
            }
          case 55: break;
          case 28: 
            { return EOF;
            }
          case 56: break;
>>>>>>> 44ffb72f7837a15c79487ff6d0cc87870a9bc0d5
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
